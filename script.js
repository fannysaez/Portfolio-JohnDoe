//Loader ! barre de progression animer
let progress = 0;
const progressBar = document.getElementById("progress-bar");
const progressText = document.getElementById("progress-text");
const loader = document.getElementById("loader");

// Simule un chargement progressif
const loadingInterval = setInterval(() => {
    progress += 5;
    progressBar.style.width = progress + "%";
    progressText.innerText = progress + "%"; // Mise √† jour du texte

    if (progress >= 100) {
        clearInterval(loadingInterval);
        setTimeout(() => {
            loader.style.opacity = "0";
            setTimeout(() => loader.style.display = "none", 500);
        }, 300);
    }
}, 100);


// Effet de bascule (Toggle Effect) pour tous les services

//S√©lection de l'√©l√©ment avec id='nature'
const nature = document.getElementById('nature');
const evenement = document.getElementById('evenement');
const portraits = document.getElementById('portraits');
const retouche = document.getElementById('retouche');

//Variable de contr√¥le
let existNature = false;
let existEvenement = false;
let existPortraits = false;
let existRetouche = false;

//Variables existNature, existEvenement, etc. : Ces variables permettent de suivre l'√©tat (existe ou non) de chaque paragraphe pour savoir si on doit le cr√©er ou le supprimer.

//Fonction pour g√©rer l'ajout ou suppression de paragraphe
function toggleParagraphe(element, existFlag, text, id) {
    const paragraphe = document.querySelector(`#${id}`);
    
    if (paragraphe) {
        paragraphe.remove();
    } else {
        const newParagraphe = document.createElement('p');
        newParagraphe.textContent = text;
        newParagraphe.id = id;
        element.appendChild(newParagraphe);
    }
    
    return !existFlag;
}

//toggleParagraphe() : Cette fonction est utilis√©e pour ajouter ou supprimer un paragraphe. Elle prend l'√©l√©ment cliqu√©, un drapeau (existFlag) pour v√©rifier si un paragraphe existe d√©j√†, le texte √† afficher, et l'ID pour le paragraphe.

//Ajout des √©couteurs d'√©v√©nements pour chaque √©l√©ment
nature.addEventListener('click', () => {
    existNature = toggleParagraphe(nature, existNature, 
        'Notre service de photographie de la nature offre des images √† couper le souffle, capturant la beaut√© sauvage du monde naturel. Que vous soyez un passionn√© de paysages, une entreprise de tourisme ou une organisation d√©di√©e √† la conservation de la nature, nos photographies sauront r√©pondre √† vos besoins sp√©cifiques.', 
        'paragrapheNature');
});

evenement.addEventListener('click', () => {
    existEvenement = toggleParagraphe(evenement, existEvenement, 
        'La photographie d\'√©v√©nements capture l\'essence des moments importants de la vie, qu\'il s\'agisse de mariages, de f√™tes, ou d\'autres occasions sp√©ciales. Nous nous assurons que chaque moment cl√© est immortalis√© avec professionnalisme et cr√©ativit√©.', 
        'paragrapheEvenement');
});

portraits.addEventListener('click', () => {
    existPortraits = toggleParagraphe(portraits, existPortraits, 
        'Nos portraits sont con√ßus pour capturer l\'individualit√© et l\'authenticit√© de chaque sujet. Que ce soit pour des portraits personnels, professionnels ou familiaux, notre √©quipe sait comment faire ressortir le meilleur de chaque personne.', 
        'paragraphePortraits');
});

retouche.addEventListener('click', () => {
    existRetouche = toggleParagraphe(retouche, existRetouche, 
        'La retouche photo professionnelle permet de sublimer vos images en corrigeant les imperfections, ajustant les couleurs et am√©liorant la qualit√© visuelle. Nous offrons des services de retouche pour des portraits, des √©v√©nements, et bien plus.', 
        'paragrapheRetouche');
});

//√âcouteurs d'√©v√©nements : Chaque √©l√©ment de la liste (nature, evenement, portraits, retouche) a un √©couteur d'√©v√©nements click qui d√©clenche la fonction toggleParagraphe avec des param√®tres sp√©cifiques √† chaque √©l√©ment.


// Mode sombre/clair avec icones

// Fonction pour basculer le mode sombre/clair
const modeToggleButton = document.getElementById('modeToggle');

// V√©rifier si le mode sombre est d√©j√† activ√© depuis le localStorage
const currentMode = localStorage.getItem('mode');
if (currentMode === 'dark') {
    document.body.classList.add('dark-mode');
    modeToggleButton.textContent = "‚òÄÔ∏è Mode Clair"; // Modifier le texte du bouton
}

// Ajouter un √©v√©nement de clic pour basculer le mode
modeToggleButton.addEventListener('click', () => {
    document.body.classList.toggle('dark-mode');
    // Sauvegarder le mode dans le localStorage
    if (document.body.classList.contains('dark-mode')) {
        localStorage.setItem('mode', 'dark');
        modeToggleButton.textContent = "‚òÄÔ∏è Mode Clair"; // Modifier le texte du bouton
    } else {
        localStorage.setItem('mode', 'light');
        modeToggleButton.textContent = "üåô Mode Sombre"; // Modifier le texte du bouton
    }
});

//Slide
const slide = document.querySelectorAll(".slide");
let numero = 0;

// Afficher la premi√®re image d√®s le d√©but
slide[numero].classList.add("active");

function ChangeSlide(sens) {
    slide[numero].classList.remove("active"); // Masque l'image actuelle
    numero = numero + sens;
    if (numero < 0)
        numero = slide.length - 1;
    if (numero > slide.length - 1)
        numero = 0;
    slide[numero].classList.add("active");
}

// D√©filement automatique toutes les 3 secondes (3000 ms)
setInterval(() => {
    ChangeSlide(1); // D√©filement vers la prochaine image
}, 3000); // Change cette valeur pour ajuster la vitesse (en millisecondes)

document.addEventListener("DOMContentLoaded", function () {
    const lightbox = document.getElementById("lightbox");
    const lightboxImg = document.getElementById("lightbox-img");
    const images = document.querySelectorAll(".gallery-item img");

    images.forEach(img => {
        img.addEventListener("click", function () {
            lightbox.classList.add("active");
            lightboxImg.src = this.src;
        });
    });

    // Ferme la lightbox au clic
    lightbox.addEventListener("click", function () {
        lightbox.classList.remove("active");
    });
});
